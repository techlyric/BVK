// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Models.AssessmentModel", b =>
                {
                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("AssessmentModel", (string)null);
                });

            modelBuilder.Entity("Project.Models.CourseModel", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseModel", (string)null);
                });

            modelBuilder.Entity("Project.Models.ResultModel", b =>
                {
                    b.Property<Guid>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResultId");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("UserId");

                    b.ToTable("ResultModel", (string)null);
                });

            modelBuilder.Entity("Project.Models.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "IX_UserModel")
                        .IsUnique();

                    b.ToTable("UserModel", (string)null);
                });

            modelBuilder.Entity("Project.Models.AssessmentModel", b =>
                {
                    b.HasOne("Project.Models.CourseModel", "Course")
                        .WithMany("AssessmentModels")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentModel_CourseModel");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Project.Models.CourseModel", b =>
                {
                    b.HasOne("Project.Models.UserModel", "Instructor")
                        .WithMany("CourseModels")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseModel_UserModel");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Project.Models.ResultModel", b =>
                {
                    b.HasOne("Project.Models.AssessmentModel", "Assessment")
                        .WithMany("ResultModels")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResultModel_AssessmentModel");

                    b.HasOne("Project.Models.UserModel", "User")
                        .WithMany("ResultModels")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ResultModel_UserModel");

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Models.AssessmentModel", b =>
                {
                    b.Navigation("ResultModels");
                });

            modelBuilder.Entity("Project.Models.CourseModel", b =>
                {
                    b.Navigation("AssessmentModels");
                });

            modelBuilder.Entity("Project.Models.UserModel", b =>
                {
                    b.Navigation("CourseModels");

                    b.Navigation("ResultModels");
                });
#pragma warning restore 612, 618
        }
    }
}
